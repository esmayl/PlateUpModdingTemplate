<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KitchenLib-Workshop</name>
    </assembly>
    <members>
        <member name="T:KitchenLib.Main">
            <summary>
            The main class of the KitchenLib mod.
            </summary>
        </member>
        <member name="F:KitchenLib.Main.MOD_ID">
            <summary>
            The ID of the mod.
            </summary>
        </member>
        <member name="F:KitchenLib.Main.MOD_NAME">
            <summary>
            The name of the mod.
            </summary>
        </member>
        <member name="F:KitchenLib.Main.MOD_AUTHOR">
            <summary>
            The author of the mod.
            </summary>
        </member>
        <member name="F:KitchenLib.Main.MOD_VERSION">
            <summary>
            The version of the mod.
            </summary>
        </member>
        <member name="F:KitchenLib.Main.MOD_BETA_VERSION">
            <summary>
            The beta version of the mod.
            </summary>
        </member>
        <member name="F:KitchenLib.Main.MOD_COMPATIBLE_VERSIONS">
            <summary>
            The compatible versions of the mod.
            </summary>
        </member>
        <member name="F:KitchenLib.Main.bundle">
            <summary>
            The asset bundle for the mod.
            </summary>
        </member>
        <member name="F:KitchenLib.Main.manager">
            <summary>
            The preference manager for the mod.
            </summary>
        </member>
        <member name="F:KitchenLib.Main.achievementsManager">
            <summary>
            The achievement manager for the mod.
            </summary>
        </member>
        <member name="F:KitchenLib.Main.Logger">
            <summary>
            The logger for the mod.
            </summary>
        </member>
        <member name="F:KitchenLib.Main.preferenceSystemMenuType">
            <summary>
            The type of the preference system menu.
            </summary>
        </member>
        <member name="F:KitchenLib.Main.debugLogging">
            <summary>
            Whether or not extra debug info will be displayed. True when either the isDebug property in kitchenlib.json is True or when any mods (other than KL beta) are installed locally
            </summary>
        </member>
        <member name="F:KitchenLib.Main.steamCloud">
            <summary>
            Whether or not data should be synced with the Steam Cloud.
            </summary>
        </member>
        <member name="M:KitchenLib.Main.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KitchenLib.Main"/> class.
            </summary>
        </member>
        <member name="M:KitchenLib.Main.OnPostActivate(KitchenMods.Mod)">
            <summary>
            Called after the mod is activated.
            </summary>
            <param name="mod">The mod instance.</param>
        </member>
        <member name="M:KitchenLib.Main.OnInitialise">
            <summary>
            Called during the initialization phase.
            </summary>
        </member>
        <member name="M:KitchenLib.Main.SetupMenus">
            <summary>
            Sets up the menus for the mod.
            </summary>
        </member>
        <member name="M:KitchenLib.Main.RegisterNewCape``1(System.String,System.String)">
            <summary>
            Registers a new cape.
            </summary>
            <typeparam name="T">The type of the cape.</typeparam>
            <param name="id">The ID of the cape.</param>
            <param name="display">The display name of the cape.</param>
        </member>
        <member name="M:KitchenLib.BaseMod.AddViewType(System.String)">
            <summary>
            Register a custom view type.
            </summary>
            <param name="id">The view ID.</param>
            <returns>The corresponding CustomViewType, for assigning to a field.</returns>
        </member>
        <member name="M:KitchenLib.BaseMod.AddViewType(System.String,UnityEngine.GameObject)">
            <summary>
            Register a custom view type with the specified prefab.
            </summary>
            <param name="id">The view ID.</param>
            <param name="prefab">The prefab.</param>
            <returns>The corresponding CustomViewType, for assigning to a field.</returns>
        </member>
        <member name="M:KitchenLib.BaseMod.AddViewType(System.String,System.Func{UnityEngine.GameObject})">
            <summary>
            Register a custom view type with the specified prefab builder. The prefab builder is lazily-evaluated only once.
            </summary>
            <param name="id">The view ID.</param>
            <param name="prefab">The prefab builder.</param>
            <returns>The corresponding CustomViewType, for assigning to a field.</returns>
        </member>
        <member name="T:KitchenLib.IMMS.IMMSContext">
            <summary>
            Context of the message, including channel and sender/target.
            </summary>
        </member>
        <member name="F:KitchenLib.IMMS.IMMSContext.Id">
            <summary>
            The ID of the message.
            </summary>
        </member>
        <member name="F:KitchenLib.IMMS.IMMSContext.Timestamp">
            <summary>
            The timestamp of the message, in ticks.
            </summary>
        </member>
        <member name="F:KitchenLib.IMMS.IMMSContext.Channel">
            <summary>
            The channel of the message.
            </summary>
        </member>
        <member name="F:KitchenLib.IMMS.IMMSContext.Source">
            <summary>
            The ID of the client that this message came from, or -1 if this is an Internal message.
            </summary>
        </member>
        <member name="F:KitchenLib.IMMS.IMMSContext.Target">
            <summary>
            The ID of the intended recipient of this message, or -1 if not applicable.
            </summary>
        </member>
        <member name="F:KitchenLib.IMMS.IMMSContext.Type">
            <summary>
            The direction of the message.
            </summary>
        </member>
        <member name="T:KitchenLib.IMMS.IMMSManager">
            <summary>
            Inter-mod messaging system. Register listeners with Register(). Send messages with SendMessage().
            </summary>
        </member>
        <member name="T:KitchenLib.IMMS.IMMSManager.MessageHandler">
            <summary>
            Delegate representing a message listener. Return null if this is only a consumer.
            </summary>
            <param name="key">The key of the message sent on the channel, representing the action that the recieving mod should take. May be null.</param>
            <param name="ctx">The context of the message being sent, such as the channel and the source/target clients.</param>
            <param name="args">Arguments of the message.</param>
            <returns>The result of handling the message. May be null.</returns>
        </member>
        <member name="M:KitchenLib.IMMS.IMMSManager.SendLocalMessage(System.String,System.String,System.Object[])">
            <summary>
            Send a message on the specified channel.
            </summary>
            <param name="channel">The channel to send the message on.</param>
            <param name="key">The key of the message, representing the action that the recieving mod should take.</param>
            <param name="args">Arguments of the message.</param>
            <returns>The result from the handler which handled the message. Will be null if there are no listeners on that channel.</returns>
        </member>
        <member name="M:KitchenLib.IMMS.IMMSManager.SendNetworkMessage(System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Send a message on the specified channel.
            </summary>
            <param name="channel">The channel to send the message on.</param>
            <param name="key">The key of the message, representing the action that the recieving mod should take.</param>
            <param name="target">The target client of the message. See IMMSTarget for specialty targets.</param>
            <param name="args">Arguments of the message.</param>
            <returns>The result from the handler which handled the message. Will be null if there are no listeners on that channel.</returns>
        </member>
        <member name="M:KitchenLib.IMMS.IMMSManager.Register(System.String,KitchenLib.IMMS.IMMSManager.MessageHandler)">
            <summary>
            Register a listener on a specific channel.
            </summary>
            <param name="channel">The channel to listen to.</param>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:KitchenLib.IMMS.IMMSManager.RegisterAll(KitchenLib.IMMS.IMMSManager.MessageHandler)">
            <summary>
            Register a listener to listen to all channels.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="T:KitchenLib.IMMS.IMMSMessageType">
            <summary>
            Specifies the client-server direction of a message.
            </summary>
        </member>
        <member name="F:KitchenLib.IMMS.IMMSMessageType.Internal">
            <summary>
            Send from a mod to another mod within the same client.
            </summary>
        </member>
        <member name="F:KitchenLib.IMMS.IMMSMessageType.HostToClient">
            <summary>
            Sent from host to a specific client.
            </summary>
        </member>
        <member name="F:KitchenLib.IMMS.IMMSMessageType.ClientToHost">
            <summary>
            Sent from a specific client to host.
            </summary>
        </member>
        <member name="F:KitchenLib.IMMS.IMMSMessageType.ClientToClient">
            <summary>
            Sent from specific client to another client.
            </summary>
        </member>
        <member name="F:KitchenLib.Preferences.PreferenceManager.globalManager">
            <summary>
            The global preference manager for the mod.
            </summary>
        </member>
        <member name="M:KitchenLib.Preferences.PreferenceManager.#ctor(System.String)">
            <summary>
            Create a preference manager attached to the given mod ID.
            </summary>
            <param name="modId">The mod ID.</param>
        </member>
        <member name="M:KitchenLib.Preferences.PreferenceManager.SetProfile(System.String)">
            <summary>
            Set the current mod-level preference profile of the preference manager.
            </summary>
            <param name="profile">The name of the profile.</param>
        </member>
        <member name="M:KitchenLib.Preferences.PreferenceManager.GetPreference``1(System.String)">
            <summary>
            Get the preference associated with a given key. Preferences need to be registered with 
            <see cref="M:KitchenLib.Preferences.PreferenceManager.RegisterPreference``1(``0)"/> before using this.
            </summary>
            <typeparam name="T">The type of the preference.</typeparam>
            <param name="key">The key of the preference.</param>
            <returns>The requested preference.</returns>
        </member>
        <member name="M:KitchenLib.Preferences.PreferenceManager.Get``1(System.String)">
            <summary>
            Get the value associated with the preference with a given key. Preferences need to be 
            registered with <see cref="M:KitchenLib.Preferences.PreferenceManager.RegisterPreference``1(``0)"/> before using this. It is recommended
            to use <see cref="M:KitchenLib.Preferences.PreferenceManager.GetPreference``1(System.String)"/> along with <see cref="M:KitchenLib.Preferences.PreferenceBase`1.Get"/> 
            instead of this method.
            </summary>
            <typeparam name="T">The type of the preference.</typeparam>
            <param name="key">The key of the preference.</param>
            <returns>The value associated with the preference.</returns>
        </member>
        <member name="M:KitchenLib.Preferences.PreferenceManager.Set``1(System.String,System.Object)">
            <summary>
            Get the value associated with the preference with a given key. Preferences need to be 
            registered with <see cref="M:KitchenLib.Preferences.PreferenceManager.RegisterPreference``1(``0)"/> before using this. It is recommended
            to use <see cref="M:KitchenLib.Preferences.PreferenceBase`1.Set(`0)"/> instead of this method. Note that this method
            is not type safe and will throw an exception if the given value is not the correct type
            for the preference.
            </summary>
            <typeparam name="T">The type of the preference.</typeparam>
            <param name="key">The key of the preference.</param>
            <param name="value">The new value of the preference.</param>
        </member>
        <member name="M:KitchenLib.Preferences.PreferenceManager.Save">
            <summary>
            Save the current values of the preferences managed by this preference manager to the
            current profile's file on disk.
            </summary>
        </member>
        <member name="M:KitchenLib.Preferences.PreferenceManager.Load">
            <summary>
            Load the values of the preferences managed by this preference manager from the
            current profile's file on disk.
            </summary>
        </member>
        <member name="M:KitchenLib.Preferences.PreferenceManager.RegisterPreference``1(``0)">
            <summary>
            Register a preference with this preference manager.
            </summary>
            <typeparam name="T">the type of the preference.</typeparam>
            <param name="preference">the preference to register.</param>
            <returns>A reference to the input preference.</returns>
        </member>
        <member name="M:KitchenLib.UI.GenericPopupManager.CreatePopup(System.String,System.String,Kitchen.GenericChoiceType,System.Action,System.Action,System.Nullable{TMPro.TextAlignmentOptions},System.Nullable{TMPro.TextAlignmentOptions},System.Nullable{UnityEngine.Color})">
            <summary>
            Add a popup to the popup queue.
            </summary>
            <param name="title">The title of the popup.</param>
            <param name="description">The description of the popup.</param>
            <param name="type">How the user(s) close the popup.</param>
            <param name="onSuccess">Action to run when the popup closes successfully.</param>
            <param name="onCancel">Action to run when the popup closes by being cancelled.</param>
            <param name="titleAlignment">The alignment of the title.</param>
            <param name="descriptionAlignment">The alignment of the description.</param>
            <param name="color">The color of the popup.</param>
        </member>
        <member name="M:KitchenLib.Utils.ApplianceOverrides.AddPurchaseCostOverride(System.Int32,System.Int32)">
            <summary>
            Override the cost of an appliance.
            </summary>
            <param name="applianceId">The ID of the appliance.</param>
            <param name="cost">The new cost of the appliance.</param>
        </member>
        <member name="M:KitchenLib.Utils.ApplianceOverrides.RemovePurchaseCostOverride(System.Int32)">
            <summary>
            Remove an appliance cost override.
            </summary>
            <param name="applianceId">The ID of the appliance.</param>
        </member>
        <member name="M:KitchenLib.Utils.GameObjectUtils.GetChildObject(UnityEngine.GameObject,System.String)">
            <summary>
            Given a GameObject and a path, such as "A" or "A/B/C", find a child object.
            </summary>
            <param name="prefab">The parent object.</param>
            <param name="childPath">The path to search for the child at.</param>
            <returns>The child GameObject, if found. Otherwise null.</returns>
        </member>
        <member name="M:KitchenLib.Utils.GameObjectUtils.GetChild(UnityEngine.GameObject,System.String)">
            <summary>
            Given a GameObject and a path, such as "A" or "A/B/C", find a child object.
            </summary>
            <param name="parent">The parent object.</param>
            <param name="childPath">The path to search for the child at.</param>
            <returns>The child GameObject, if found. Otherwise null.</returns>
        </member>
        <member name="M:KitchenLib.Utils.GameObjectUtils.GetChild(UnityEngine.GameObject,System.Int32)">
            <summary>
            Given a GameObject and a child index, find a child object.
            </summary>
            <param name="parent">The parent object.</param>
            <param name="childIndex">The index of the child.</param>
            <returns>The child GameObject, if found. Otherwise throws an error.</returns>
        </member>
        <member name="M:KitchenLib.Utils.GameObjectUtils.GetChildCount(UnityEngine.GameObject)">
            <summary>
            Gets the amount of children of a GameObject.
            </summary>
            <param name="parent">The parent object.</param>
            <returns>The number of children of the parent.</returns>
        </member>
        <member name="M:KitchenLib.Utils.GameObjectUtils.HasComponent``1(UnityEngine.GameObject)">
            <summary>
            Checks if a GameObject has the specified component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="gameObject">The GameObject to check.</param>
            <returns>True if gameObject has the component.</returns>
        </member>
        <member name="M:KitchenLib.Utils.GameObjectUtils.TryAddComponent``1(UnityEngine.GameObject)">
            <summary>
            Adds a component to a GameObject if it does not already have a component of that type.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <param name="gameObject">The GameObject to check.</param>
            <returns>True if the component was added.</returns>
        </member>
        <member name="M:KitchenLib.Utils.GameObjectUtils.CopyComponent(UnityEngine.Component,UnityEngine.GameObject)">
            <summary>
            Clones a component from one GameObject to another
            </summary>
            <param name="original">The original component to copy.</param>
            <param name="destination">The GameObject to assign the clone to.</param>
            <returns>Cloned component</returns>
        </member>
        <member name="M:KitchenLib.Utils.ItemOverrides.AddRewardOverride(System.Int32,System.Int32)">
            <summary>
            Override the reward of an item.
            </summary>
            <param name="itemId">The ID of the item.</param>
            <param name="reward">The new reward of the item.</param>
        </member>
        <member name="M:KitchenLib.Utils.ItemOverrides.RemoveRewardOverride(System.Int32)">
            <summary>
            Remove an item reward override.
            </summary>
            <param name="itemId">The ID of the item.</param>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.ApplyMaterial(UnityEngine.GameObject,System.String,UnityEngine.Material[])">
            <summary>
            Apply a material array to a child renderer.
            </summary>
            <param name="parent">The parent object.</param>
            <param name="childPath">The path to the child object.</param>
            <param name="materials">The material array to apply.</param>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.ApplyMaterial``1(UnityEngine.GameObject,System.String,UnityEngine.Material[])">
            <summary>
            Apply a material array to a child renderer.
            </summary>
            <typeparam name="T">The type of the renderer.</typeparam>
            <param name="parent">The parent object.</param>
            <param name="childPath">The path to the child object.</param>
            <param name="materials">The material array to apply.</param>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.ApplyMaterial``1(UnityEngine.GameObject,UnityEngine.Material[])">
            <summary>
            Apply a material array to a GameObject's renderer.
            </summary>
            <typeparam name="T">The type of the renderer.</typeparam>
            <param name="gameObject">The object to apply the material to.</param>
            <param name="materials">The material array to apply.</param>
            <returns>The input GameObject.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.ApplyMaterial(UnityEngine.GameObject,UnityEngine.Material[])">
            <summary>
            Apply a material array to a GameObject's renderer.
            </summary>
            <param name="gameObject">The object to apply the material to.</param>
            <param name="materials">The material array to apply.</param>
            <returns>The input GameObject.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.ApplyMaterial(UnityEngine.GameObject,System.String[])">
            <summary>
            Apply a material array to a GameObject's renderer.
            </summary>
            <param name="gameObject">The object to apply the material to.</param>
            <param name="materials">The names of the materials to apply.</param>
            <returns>The input GameObject.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.ApplyMaterialToChildren``1(UnityEngine.GameObject,System.String,UnityEngine.Material[])">
            <summary>
            Apply a material array to all children of a GameObject.
            </summary>
            <typeparam name="T">The type of the renderer.</typeparam>
            <param name="parent">The parent object.</param>
            <param name="nameContains">A filter that children names must contain to be modified.</param>
            <param name="materials">The materials to apply.</param>
            <returns>The parent GameObject.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.ApplyMaterialToChildren(UnityEngine.GameObject,System.String,UnityEngine.Material[])">
            <summary>
            Apply a material array to all children of a GameObject.
            </summary>
            <param name="parent">The parent object.</param>
            <param name="nameContains">A filter that children names must contain to be modified.</param>
            <param name="materials">The materials to apply.</param>
            <returns>The parent GameObject.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.ApplyMaterialToChildren(UnityEngine.GameObject,System.String,System.String[])">
            <summary>
            Apply a material array to all children of a GameObject.
            </summary>
            <param name="parent">The parent object.</param>
            <param name="nameContains">A filter that children names must contain to be modified.</param>
            <param name="materials">The names of the materials to apply.</param>
            <returns>The parent GameObject.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.ApplyMaterialToChildren``1(UnityEngine.GameObject,UnityEngine.Material[])">
            <summary>
            Apply a material array to all children of a GameObject.
            </summary>
            <typeparam name="T">The type of the renderer.</typeparam>
            <param name="parent">The parent object.</param>
            <param name="materials">The materials to apply.</param>
            <returns>The parent GameObject.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.ApplyMaterialToChildren(UnityEngine.GameObject,UnityEngine.Material[])">
            <summary>
            Apply a material array to all children of a GameObject.
            </summary>
            <param name="parent">The parent object.</param>
            <param name="materials">The materials to apply.</param>
            <returns>The parent GameObject.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.ApplyMaterialToChildren(UnityEngine.GameObject,System.String[])">
            <summary>
            Apply a material array to all children of a GameObject.
            </summary>
            <param name="parent">The parent object.</param>
            <param name="materials">The names of the materials to apply.</param>
            <returns>The parent GameObject.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.ApplyMaterialToChild``1(UnityEngine.GameObject,System.String,UnityEngine.Material[])">
            <summary>
            Apply a material array to a child of a GameObject.
            </summary>
            <typeparam name="T">The type of the renderer.</typeparam>
            <param name="parent">The parent object.</param>
            <param name="childPath">The path to the child object.</param>
            <param name="materials">The materials to apply.</param>
            <returns>The parent GameObject.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.ApplyMaterialToChild(UnityEngine.GameObject,System.String,UnityEngine.Material[])">
            <summary>
            Apply a material array to a child of a GameObject.
            </summary>
            <param name="parent">The parent object.</param>
            <param name="childPath">The path to the child object.</param>
            <param name="materials">The materials to apply.</param>
            <returns>The parent GameObject.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.ApplyMaterialToChild(UnityEngine.GameObject,System.String,System.String[])">
            <summary>
            Apply a material array to a child of a GameObject.
            </summary>
            <param name="parent">The parent object.</param>
            <param name="childPath">The path to the child object.</param>
            <param name="materials">The names of the materials to apply.</param>
            <returns>The parent GameObject.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.GetAllMaterials(System.Boolean)">
            <summary>
            Gets a list of all Materials.
            </summary>
            <param name="includeCustom">If the returned list should contain custom Materials.</param>
            <returns>The list of Materials.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.GetAllMaterials(System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Gets a list of all Materials.
            </summary>
            <param name="includeCustom">If the returned list should contain custom Materials.</param>
            <param name="shaders">What shaders to filter by.</param>
            <returns>The list of Materials.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.GetExistingMaterial(System.String)">
            <summary>
            Get a vanilla material by name.
            </summary>
            <param name="materialName">The name of the material to find.</param>
            <returns>The requested material or null if not found.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.GetCustomMaterial(System.String)">
            <summary>
            Get a custom material by name.
            </summary>
            <param name="materialName">The name of the material to find.</param>
            <returns>The requested material or null if not found.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.GetMaterialArray(System.String[])">
            <summary>
            Get a material array from a array of material names.
            </summary>
            <param name="materials">The names of the materials.</param>
            <returns>The corresponding material array.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.ColorFromHex(System.Int32)">
            <summary>
            Get a Unity Color from a hex code.
            </summary>
            <param name="hex">The hex code.</param>
            <returns>The corresponding Color.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.CreateFlat(System.String,UnityEngine.Color,System.Single,System.Single)">
            <summary>
            Creates a new Material with the Simple Flat shader.
            </summary>
            <param name="name">The name for the Material.</param>
            <param name="color">The Color for the Material.</param>
            <param name="shininess">How shiny the Material should be.</param>
            <param name="overlayScale">The scale for the Material's overlay.</param>
            <returns>The created Material.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.CreateFlat(System.String,System.Int32,System.Single,System.Single)">
            <summary>
            Creates a new Material with the Simple Flat shader.
            </summary>
            <param name="name">The name for the Material.</param>
            <param name="color">The hex code for the Material.</param>
            <param name="shininess">How shiny the Material should be.</param>
            <param name="overlayScale">The scale for the Material's overlay.</param>
            <returns>The created Material.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.CreateTransparent(System.String,UnityEngine.Color)">
            <summary>
            Creates a new Material with the Simple Transparent shader.
            </summary>
            <param name="name">The name for the Material.</param>
            <param name="color">The Color for the Material.</param>
            <returns>The created Material.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.CreateTransparent(System.String,System.Int32,System.Single)">
            <summary>
            Creates a new Material with the Simple Transparent shader.
            </summary>
            <param name="name">The name for the Material.</param>
            <param name="color">The hex code for the Material.</param>
            <param name="opacity">The opacity for the Material.</param>
            <returns>The created Material.</returns>
        </member>
        <member name="M:KitchenLib.Utils.MaterialUtils.AssignMaterialsByNames(UnityEngine.GameObject)">
            <summary>
            Replace Materials from the Unity Editor with Materials from PlateUp!
            </summary>
            <param name="gameObject">The GameObject to modify.</param>
            <returns>The modified GameObject</returns>
        </member>
        <member name="M:KitchenLib.Utils.UnlockOverrides.AddColourOverride(System.Int32,UnityEngine.Color)">
            <summary>
            Override the color of an unlock.
            </summary>
            <param name="unlockId">The ID of the unlock.</param>
            <param name="colour">The new color.</param>
        </member>
        <member name="M:KitchenLib.Utils.UnlockOverrides.RemoveColourOverride(System.Int32)">
            <summary>
            Remove the color override of an unlock.
            </summary>
            <param name="unlockId">The ID of the unlock.</param>
        </member>
        <member name="M:KitchenLib.Utils.UnlockOverrides.AddIconOverride(System.Int32,System.String)">
            <summary>
            Override the icon of an unlock.
            </summary>
            <param name="unlockId">The ID of the unlock.</param>
            <param name="icon">The new icon.</param>
        </member>
        <member name="M:KitchenLib.Utils.UnlockOverrides.RemoveIconOverride(System.Int32)">
            <summary>
            Remove the icon override of an unlock.
            </summary>
            <param name="unlockId">The ID of the unlock.</param>
        </member>
        <member name="T:KitchenLib.Utils.ViewUtils">
            <summary>
            Utilities related to views. See also AddViewType in BaseMod.
            </summary>
        </member>
        <member name="M:KitchenLib.Utils.ViewUtils.GetViewType(System.String,System.String)">
            <summary>
            Find a custom view type by mod ID and view ID.
            </summary>
            <param name="modId">The registering mod ID.</param>
            <param name="viewId">The view's ID.</param>
            <returns>The CustomViewType corresponding to the ID.</returns>
        </member>
        <member name="M:KitchenLib.Utils.ViewUtils.GetViewType(System.Int32)">
            <summary>
            Find a custom view type by mod ID and view ID.
            </summary>
            <param name="id">The view's ID.</param>
            <returns>The CustomViewType corresponding to the ID.</returns>
        </member>
    </members>
</doc>
